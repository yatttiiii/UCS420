Q.1 Write a program to create a NumPy 1D-array with 5 elements and perform basic operations like:
a) Addition of 2 in all the element b) Multiply 3 with all the elements c) Divide every element by 2
CODE:
import numpy as np
a=np.array([2,3,4,1,8])
b=2+a #(a)
print(b)
c=3*a #(b)
print(c)
d=a/2 #(c)
print(d)
OUTPUT:
[ 4  5  6  3 10]
[ 6  9 12  3 24]
[1.  1.5 2.  0.5 4. ]

Q.2 Questions on Basic NumPy Array: a) Reverse the NumPy array: arr = np.array([1, 2, 3, 6, 4, 5])
b) Find the most frequent value and their indice(s) in the following arrays: i. x = np.array([1,2,3,4,5,1,2,1,1,1]) ii. y = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3, ])
CODE:
import numpy as np
arr = np.array([1, 2, 3, 6, 4, 5]) #(a)
print(arr[::-1])
x=np.array([1,2,3,4,5,1,2,1,1,1]) #(b)(i)
print(x)
unique_value,count=np.unique(x,return_counts=True)
most_frequent=unique_value[np.argmax(count)]
print("Max count is of:",most_frequent)
indices=np.where(x==most_frequent)
print("Indices where",most_frequent," occurs are:",indices[0])
y = np.array([1, 1, 1, 2, 3, 4, 2, 4, 3, 3, ]) #(b)(ii)
print(y)
unique,count=np.unique(y,return_counts=True)
most_frequent_values = unique[count== count.max()]
print("Most frequent values:", most_frequent_values)
for value in most_frequent_values:
    indices = np.where(y == value)
    print("Indices where", value, "occurs are:", indices[0])
OUTPUT:
[5 4 6 3 2 1]
[1 2 3 4 5 1 2 1 1 1]
Max count is of: 1
Indices where 1  occurs are: [0 5 7 8 9]
[1 1 1 2 3 4 2 4 3 3]
Most frequent values: [1 3]
Indices where 1 occurs are: [0 1 2]
Indices where 3 occurs are: [4 8 9]

Q.3 For the given 2-D array arr=np.array([10, 20, 30], [40, 50, 60], [70, 80, 90]), access elements using row and column indices as follows:
a) Access 1st row, 2nd column b) Access 3rd row, 1st column
CODE:
import numpy as np
arr=np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])
print(arr[0,1])
print(arr[2,0])
OUTPUT:
20
70

Q.4 Write program to create an 1-D NumPy array named num with evenly spaced 25 numbers from 10 to 100 using linspace(). 
Print the dimensions of the array, shape, total elements, the data type of each element and total number of bytes consumed by the array.
Find the transpose of this array using reshape() attribute. Can we do the same with T attribute?
CODE:
import numpy as np
num=np.array(np.linspace(10,100,25))
print("Arrray:",num)
print("Dimension:",num.ndim)
print("Shape:",num.shape)
print("Size:",num.size)
print("Data type:",num.dtype)
print("Number of bytes:",num.nbytes)
print("Transpose:",num.reshape(25,1))
print("Transpose:",num.T)
OUTPUT:
Arrray: [ 10.    13.75  17.5   21.25  25.    28.75  32.5   36.25  40.    43.75
  47.5   51.25  55.    58.75  62.5   66.25  70.    73.75  77.5   81.25
  85.    88.75  92.5   96.25 100.  ]
Dimension: 1
Shape: (25,)
Size: 25
Data type: float64
Number of bytes: 200
Transpose: [[ 10.  ]
 [ 13.75]
 [ 17.5 ]
 [ 21.25]
 [ 25.  ]
 [ 28.75]
 [ 32.5 ]
 [ 36.25]
 [ 40.  ]
 [ 43.75]
 [ 47.5 ]
 [ 51.25]
 [ 55.  ]
 [ 58.75]
 [ 62.5 ]
 [ 66.25]
 [ 70.  ]
 [ 73.75]
 [ 77.5 ]
 [ 81.25]
 [ 85.  ]
 [ 88.75]
 [ 92.5 ]
 [ 96.25]
 [100.  ]]
Transpose: [ 10.    13.75  17.5   21.25  25.    28.75  32.5   36.25  40.    43.75
  47.5   51.25  55.    58.75  62.5   66.25  70.    73.75  77.5   81.25
  85.    88.75  92.5   96.25 100.  ]

Q5. Create a 2-D Array of three rows and four columns, named ucs420 with following values â€“ 10, 20, 30, 40, 50, 60, 70, 80, 90, 15, 20, 35. 
Compute the mean, median, max, min, unique elements. Reshape the array to four rows and three columns and name it as reshaped_ ucs420. 
Resize the array to two rows and three columns and name it as resized_ ucs420
CODE:
import numpy as np
ucs420_yati=np.array([[10,20,30,40],[50,60,70,80],[90, 15, 20, 35]])
print(ucs420_yati)
mean_value=np.mean(ucs420_yati)
print("Mean:",mean_value)
median_value=np.median(ucs420_yati)
print("Mean:",median_value)
max_val=np.max(ucs420_yati)
print("Max:",max_val)
min_val=np.min(ucs420_yati)
print("Min:",min_val)
unique_val=np.unique(ucs420_yati)
print("Unique:",unique_val)
reshaped_ucs420_yati=ucs420_yati.reshape(4,3)
print("Reshaped Array:",reshaped_ucs420_yati)
resized_array=np.resize(ucs420_yati,(2,3))
print("Resized Array:",resized_array)
OUTPUT:
[[10 20 30 40]
 [50 60 70 80]
 [90 15 20 35]]
Mean: 43.333333333333336
Mean: 37.5
Max: 90
Min: 10
Unique: [10 15 20 30 35 40 50 60 70 80 90]
Reshaped Array: [[10 20 30]
 [40 50 60]
 [70 80 90]
 [15 20 35]]
Resized Array: [[10 20 30]
 [40 50 60]]


