1. Create a List L that is defined as= [10, 20, 30, 40, 50, 60, 70, 80].
i. WAP to add 200 and 300 to L.
ii. WAP to remove 10 and 30 from L.
iii. WAP to sort L in ascending order.
iv. WAP to sort L in descending order.
CODE:
# i. Create list
L = [10, 20, 30, 40, 50, 60, 70, 80]

# i. Add 200 and 300
L.append(200)
L.append(300)

# ii. Remove 10 and 30
L.remove(10)
L.remove(30)

# iii. Sort in ascending order
L.sort()
print("Ascending:", L)

# iv. Sort in descending order
L.sort(reverse=True)
print("Descending:", L)

OUTPUT:
Ascending: [20, 40, 50, 60, 70, 80, 200, 300]
Descending: [300, 200, 80, 70, 60, 50, 40, 20]




2. Create a tuple of marks scored as scores = (45, 89.5, 76, 45.4, 89, 92, 58, 45) and
perform the following operations using tuple functions:
i. Identify the highest score and its index in the tuple.
ii. Find the lowest score and count how many times it appears.
iii. Reverse the tuple and return it as a list.
iv. Check if a specific score ‘76’ (input by the user) is present in the tuple and
print its first occurrence index, or a message saying it’s not present.

CODE:
scores = (45, 89.5, 76, 45.4, 89, 92, 58, 45)

# i. Highest score and index
highest = max(scores)
print("Highest score:", highest, "at index", scores.index(highest))

# ii. Lowest score and count
lowest = min(scores)
print("Lowest score:", lowest, "appears", scores.count(lowest), "times")

# iii. Reverse and return as list
reversed_list = list(scores[::-1])
print("Reversed as list:", reversed_list)

# iv. Check if 76 is present
search = 76
if search in scores:
    print(f"{search} found at index {scores.index(search)}")
else:
    print(f"{search} is not present")

OUTPUT:
Highest score: 92 at index 5
Lowest score: 45 appears 2 times
Reversed as list: [45, 58, 92, 89, 45.4, 76, 89.5, 45]
76 found at index 2




3. WAP to create a list of 100 random numbers between 100 and 900. Count and print
the:
i. All odd numbers
ii. All even numbers
iii. All prime numbers

CODE:
import random

# Create list of 100 random numbers
nums = [random.randint(100, 900) for _ in range(100)]

# i. Odd numbers
odd = [x for x in nums if x % 2 != 0]

# ii. Even numbers
even = [x for x in nums if x % 2 == 0]

# iii. Prime numbers
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

prime = [x for x in nums if is_prime(x)]

print("Odd numbers count:", len(odd))
print("Even numbers count:", len(even))
print("Prime numbers count:", len(prime))

OUTPUT:
Odd numbers count: 49
Even numbers count: 51
Prime numbers count: 10




4. Consider the following two sets, A and B, represenƟng scores of two teams in mulƟple
matches. A = {34, 56, 78, 90} and B = {78, 45, 90, 23}
WAP to perform the following operaƟons using set funcƟons:
i. Find the unique scores achieved by both teams (union of sets).
ii. IdenƟfy the scores that are common to both teams (intersecƟon of sets).
iii. Find the scores that are exclusive to each team (symmetric difference).
iv. Check if the scores of team A are a subset of team B, and if team B's scores are
a superset of team A.
v. Remove a specific score X (input by the user) from set A if it exists. If not, print
a message saying it is not present.

CODE:
A = {34, 56, 78, 90}
B = {78, 45, 90, 23}

# i. Union
print("Union:", A | B)

# ii. Intersection
print("Intersection:", A & B)

# iii. Symmetric Difference
print("Symmetric Difference:", A ^ B)

# iv. Subset and Superset
print("A is subset of B?", A.issubset(B))
print("B is superset of A?", B.issuperset(A))

# v. Remove a specific score X from A
X = int(input("Enter score to remove from A: "))
if X in A:
    A.remove(X)
    print("Updated A:", A)
else:
    print(f"{X} is not present in A")

OUTPUT:
A = {34, 56, 78, 90}
B = {78, 45, 90, 23}
Enter score to remove from A:56
Union: {34, 23, 90, 78, 45, 56}
Intersection: {90, 78}
Symmetric Difference: {34, 23, 45, 56}
A is subset of B? False
B is superset of A? False
56 is not present in A





5. Write a program to rename a key city to a locaƟon in the following dicƟonary.

CODE:
sample_dict = {
    "name": "Kelly",
    "age": 25,
    "salary": 8000,
    "city": "New york"
}

# Rename key
sample_dict['location'] = sample_dict.pop('city')

print(sample_dict)

OUTPUT:
{'name': 'Kelly', 'age': 25, 'salary': 8000, 'location': 'New york'}

